import base64
import os, threading, subprocess, re
from os import scandir, system, remove
from os.path import isfile, join
import pandas as pd
from dash import Dash, dcc, html
from dash.dependencies import Input, Output, State
import dash_bootstrap_components as dbc
from dash import dash_table as dt





class mlModel:
    modelData = None
    predictionAlgo = None


    def makePrediction():
        pass





class File:
    UPLOAD_DIRECTORY = "malwareGUI/app_uploaded_files"
    OUTPUT_DIRECTORY = "malwareGUI/outputFiles"

    
    # Get the opcodes for all files in a directory
    def dumpOpCodes(listOfFiles, writePath): 
        # Loop through each file in listOfFiles
        for f, file_path in listOfFiles:
            try:
                writedir = writePath
                # Get the file format

                fileFormat = subprocess.run(["objdump", "-f", file_path], capture_output=True)

                try:
                    # Filter out only the architecture type
                    fileFormat = re.search("file format (.+)", fileFormat.stdout.decode("utf-8")).group(1).strip()
                except:
                    # objdump returns "file format not recognized"
                    continue

                


                # Skip dumping hex if file already exists
                if os.path.exists(writedir):
                    continue
                
                # Dissasemble all headers in file without outputting addresses
                opCodes = subprocess.run(["objdump", "-M", "intel", "-b", fileFormat, "-s",  "-d", file_path], capture_output=True).stdout.decode("utf-8")

                # Filter out only hex using regex
                hexOnly = re.findall("\t(\w{2}( \w{2})*).+\t", opCodes)
                opCodes = ''
                for op in hexOnly:
                    opCodes += ''.join(op) + '\n'
                
                # Find longest length instruction
                lines = opCodes.splitlines()
                maxLen = len(max(lines, key=len))
                
                # Pad each instruction to have same length
                opCodes = ''   
                for line in lines:
                    while len(line) < maxLen:
                        line =  line  + ' 00'
                    opCodes += line + '\n'

                # Write opCodes to file   
                with open(writedir, "w") as out:
                    out.write(opCodes)
                    #os.remove(file_path)
                
                out.close()

            except Exception as e:
                print(e)
               
                



    def save_file(name, content, directory):
        #Saves file within uploaded files folder
        data = content.encode("utf8").split(b";base64,")[1]
        with open(os.path.join(directory, name), "wb") as fp:
            fp.write(base64.decodebytes(data))



    def getFilesInDirectory(path):
        #return the filename and path to file 
        files = []
        try:
            files = [(f.name, f.path) for f in scandir(path)]
        
        except Exception:
            pass

        return files






def create_app():
    #Dash object creation using the Flask application factory pattern;
    #allows the creation of multiple instances of the malwareApp
    malwareApp = Dash(__name__, meta_tags=([{'name': 'viewport', 'content':'width=device-width, initial-scale=1.0'}]), external_stylesheets=[dbc.themes.BOOTSTRAP])
    app = malwareApp.server



    #Top banner of webpage
    banner = html.Div([html.Div([html.H1("Malware Analyzer", className="text-warning text-center"), 
            html.P("Developed using Python and Machine Learning", className="text-center mb-1")])], className="bg-dark text-light p-4 text-center")

    #Layout of application
    malwareApp.layout = html.Div([banner, html.Div([dbc.Card(
        [
            dbc.CardImg(src="https://www.cisco.com/c/en/us/products/security/advanced-malware-protection/what-is-malware/jcr:content/Grid/category_atl_9819/layout-category-atl/anchor_info_a0df.img.png/1648845856586.png", top=True),
            html.H1("File Browser", className = "mb-4 text-center"),


            #Upload component that uses the saveFile() callback function and save_file()
            #method of the File class
            dcc.Upload(id="upload-data", children=html.Div(
                    ["Drag and drop or click to select a file to upload."]
                ),
                style={
                    "width": "90%",
                    "height": "60px",
                    "lineHeight": "60px",
                    "borderWidth": "1px",
                    "borderStyle": "dashed",
                    "borderRadius": "5px",
                    "textAlign": "center",
                    "margin": "10px",
                    },
                    multiple=True, className = "mb-4"
                    ),

            html.H2("File List", className="text-center"),

            #Html DOM elements; These elements are updated using the listFiles() & 
            #listDirectories() callback functions
            dcc.Dropdown(id="dropdown", options = ["Uploaded Files", "Disassembled Files"], 
                        value = "Uploaded Files", className = "w-50"),
            html.Ul(id="directoriesList"),
            dcc.Dropdown(id="fileList", className = "mt-5"),


            #Buttons that fire the processText(), deleteFile, disassembleFile() callback functions
            html.Div([
            dbc.Button("Process File", id="processBtn", className = "w-25 btn-primary"),
            dbc.Button("Delete File", id="deleteBtn", className = "w-25 mx-1 btn-warning"),
            dbc.Button("objdump", id="objdumpBtn", className = "w-25 btn-success")], className="mt-5 text-center"),


            #Html DOM elements that are used to display the status of the various app processes
            html.P(id="textContent", className="text-danger"),
            html.P(id="textContent2", className="text-success"),
            html.P(id="statusComplete", className="text-success")
        ],
            
            style={"max-width": "500px"}, className="h-100",
        ), 

            #A datatable is returned from processText callback function
            #and placed in the div below;
            html.Div(id="dataTable", className="inline-block", style={"margin-top": "-11%"})], 
                        style={"height": "1100px"}, className="d-flex align-items-center justify-content-center my-5 bg-light")])
    
    
    return malwareApp, app




malwareApp, app = create_app()



#callback function that returns a list of filenames within selected directory
@malwareApp.callback(
    Output("directoriesList", "children"),
    Input("dropdown", "value"),
)

def listDirectories(dropdownValue):
    ddlOptions = {"Uploaded Files": "malwareGUI/app_uploaded_files/", "Disassembled Files": "malwareGUI/outputFiles/"}
    fileNames = os.listdir(ddlOptions[dropdownValue])
    fileList = [html.Li(file) for file in fileNames]

    return fileList



#callback function that populates the drop-down menu for user file selection
@malwareApp.callback(
    Output("fileList", "options"),
    Input("dropdown", "value")
)

def listFiles(dropdownValue):
    ddlOptions = {"Uploaded Files": "malwareGUI/app_uploaded_files/", "Disassembled Files": "malwareGUI/outputFiles/"} 
    fileNames = os.listdir(ddlOptions[dropdownValue])

    return fileNames




#callback function that saves file into app_uploaded_files
@malwareApp.callback(
    Output("statusComplete", "children"),
    [Input("upload-data", "filename"), Input("upload-data", "contents")],
    )


def uploadFile(uploaded_filenames, uploaded_file_contents):
    if uploaded_filenames is not None and uploaded_file_contents is not None:
        for name, data in zip(uploaded_filenames, uploaded_file_contents):
            File.save_file(name, data, File.UPLOAD_DIRECTORY)

        return "Upload Successful"
    


#example callback function that outputs file text when file is selected;
#currently outputs a datatable of hex values, plan to add two cards for scan results;
#--Where code for machine learning model will go, that will return results of scan--#
@malwareApp.callback(
    Output("dataTable", "children"),
    Input("processBtn", "n_clicks"),
    State("fileList", "value")
    )

def processText(processBtn, filename):
    if processBtn and filename is not None:
        path = "malwareGUI/outputFiles/"
        file = filename
        infile = open(path + file, "r")
        firstLine = infile.readline()
        columns = len(firstLine.split(sep=" "))
            

        columnNames = []
        for i in range(columns):
            columnNames.append(f"Hex [{str(i+1)}]")


        dataframe = pd.read_csv(path + file, names=columnNames, sep=" ")
        dataTable = [dbc.Card([html.H1(" Hex View", className="text-center"), dt.DataTable(data = dataframe.to_dict('records'), columns=[{"name": i, "id": i} for i in dataframe.columns], page_size=13)])]

        return dataTable



#callback function that deletes a file
@malwareApp.callback(
    Output("textContent", "children"),
    Input("deleteBtn", "n_clicks"),
    State("fileList", "value")
    )

def deleteFile(deleteBtn, filename):
    if deleteBtn and filename is not None:
        path = "malwareGUI/app_uploaded_files/" + filename
        path2 = "malwareGUI/outputFiles/" + filename
        if os.path.isfile(path2) and filename != ".DS_Store":
            os.remove(path2)

           
        os.remove(path)

        return filename + " is deleted"



#callback function that disassembles the file
#and saves it to malwareGUI/outputFiles directory;
#Cameron's Code
@malwareApp.callback(
    Output("textContent2", "children"),
    Input("objdumpBtn", "n_clicks"),
    State("fileList", "value")
)

def disassembleFile(objdumpBtn, filename):
    if objdumpBtn and filename is not None:
        writedir = "malwareGUI/outputFiles/"
        files = File.getFilesInDirectory("malwareGUI/app_uploaded_files")
        File.dumpOpCodes(files, writedir + filename)

        return "Disassembly Complete"
        
        
            



                


if __name__ == "__main__":
    app.run(debug=False)