import base64
import os, subprocess, re
from os import scandir
import pandas as pd
import numpy as np
from dash import Dash, dcc, html
from dash.dependencies import Input, Output, State
import dash_bootstrap_components as dbc
from dash import dash_table as dt
from testing import make_prediction









class mlModel:
    modelData = None
    predictionAlgo = None


    def makePrediction():
        pass





class File:
    UPLOAD_DIRECTORY = "malwareGUI/app_uploaded_files/"
    OUTPUT_DIRECTORY = "malwareGUI/outputFiles/"

    
    # Get the opcodes for all files in a directory
    def dumpOpCodes(filename, writePath, file_path = UPLOAD_DIRECTORY): 
        # Loop through each file in listOfFiles
        
        try:
            writedir = writePath
            
            # Get the file format
            fileFormat = subprocess.run(["objdump", "-f", file_path + filename], capture_output=True)
            #if fileFormat != "pei-x86-64" or "pe-x86-64":
                #return "Unsupported file architecture format"

            try:
                # Filter out only the architecture type
                fileFormat = re.search("file format (.+)", fileFormat.stdout.decode("utf-8")).group(1).strip()
            except:
                # objdump returns "file format not recognized"
                pass

                

            # Skip dumping hex if file already exists
            if os.path.exists(writedir):
                return "File already disassembled"
                

            # Dissasemble all headers in file without outputting addresses
            opCodes = subprocess.run(["objdump", "-M", "intel", "-b", fileFormat, "-s",  "-d", file_path + filename], capture_output=True).stdout.decode("utf-8")


            # Filter out only hex using regex
            hexOnly = re.findall("\t(\w{2}(?: \w{2})*).+\t", opCodes)
            opCodes = ''
            # Find longest length instruction
            # maxLen = len(max(hexOnly, key=len))

            maxLen = 23
            
            # Loop through each intruction
            for op in hexOnly:
                int_opcode = ''
                # Pad each instruction to have same length
                while len(op) < maxLen:
                    op += ' 00'
                    
                # Loop through each byte in instruction
                for byte in op.split(' '):
                    # Convert byte to int
                    int_opcode += str(int(byte, base=16)) + ' '
                opCodes += int_opcode.strip() + '\n'


            # Write opCodes to file   
            with open(writedir, "w") as out:
                out.write(opCodes)
                   
                
            out.close()

            return f"{filename} disassembled"
            

        except Exception as e:
            print(e)
                



    def saveFile(name, content, directory):
        #Saves file within uploaded files folder
        data = content.encode("utf8").split(b";base64,")[1]
        with open(os.path.join(directory, name), "wb") as out:
            out.write(base64.decodebytes(data))
        
        out.close()



    def getFilesInDirectory(path):
        #return the filename and path to file 
        files = []
        try:
            files = [(f.name) for f in scandir(path)]
        
        except Exception:
            pass

        return files

    




malwareApp = Dash(__name__, meta_tags=([{'name': 'viewport', 'content':'width=device-width, initial-scale=1.0'}]), external_stylesheets=[dbc.themes.BOOTSTRAP])
server = malwareApp.server



#Layout of page
banner = html.Div([html.Div([html.H1("Malware Analyzer", className="text-warning text-center"), 
        html.P("Developed using Python, Machine Learning, and the Dash framework", className="text-center mb-1")])], className="bg-dark text-light p-4 text-center")


malwareApp.layout = html.Div([banner, html.Div([dbc.Card(
    [
        dbc.CardImg(src="assets/laptop.svg", top=True, className = "img-fluid mx-auto w-50"),
        dcc.Upload(id="upload-data", children=html.Div(
                ["Drag and drop or click to select a file to upload."]
            ),
            style={
                "width": "90%",
                "height": "90px",
                "lineHeight": "60px",
                "borderWidth": "1px",
                "borderStyle": "dashed",
                "borderRadius": "5px",
                "textAlign": "center",
                "margin": "10px",
                },
                multiple=True, className = "mb-4 mx-auto"
                   ),

        html.H2("File List"),
        dcc.Dropdown(id="dropdown", options = ["Uploaded Files", "Disassembled Files"], 
                     value = "Uploaded Files", className = "w-50"),
        html.Ul(id="directoriesList"),
        dcc.Dropdown(id="fileList", className = "mt-5"),
        html.Div([
        dbc.Button("Process File", id="processBtn", className = "w-25 btn-dark btn-sm"),
        dbc.Button("Delete File", id="deleteBtn", className = "w-25 mx-2 btn-warning btn-sm"),
        dbc.Button("objdump", id="objdumpBtn", className = "w-25 btn-secondary btn-sm")], className = "text-center mb-4 mt-5"),


        dbc.Spinner(children = [
        html.P(id="textContent", className="text-danger"),
        html.P(id="textContent2", className="text-success"),
        html.P(id="statusComplete", className="text-success")], color = "dark", size = "lg")
    ],
        
        style={"max-width": "500px"}, className="h-100",
    ), 
    
        dbc.Spinner(children = [html.Div(id="dataTable", className="inline-block mx-3", style={"height": "800px"})], color = "warning", size = "lg"),
        ], 
                    style={"height": "800px"}, className="d-flex align-items-center justify-content-center my-5 bg-light")])





#callback function that returns a list of filenames within selected directory
@malwareApp.callback(
    Output("directoriesList", "children"),
    Input("dropdown", "value"),
)


def listDirectories(dropdownValue):
    ddlOptions = {"Uploaded Files": "malwareGUI/app_uploaded_files/", "Disassembled Files": "malwareGUI/outputFiles/"}
    filesList = [html.Li(file) for file in File.getFilesInDirectory(ddlOptions[dropdownValue])]
    

    return filesList



#callback function that populates the drop-down menu for user file selection
@malwareApp.callback(
    Output("fileList", "options"),
    Input("dropdown", "value")
)

def listFiles(dropdownValue):
    ddlOptions = {"Uploaded Files": "malwareGUI/app_uploaded_files/", "Disassembled Files": "malwareGUI/outputFiles/"} 
    fileNames = File.getFilesInDirectory(ddlOptions[dropdownValue])
    

    return fileNames




#callback function that saves file into app_uploaded_files
@malwareApp.callback(
    Output("statusComplete", "children"),
    [Input("upload-data", "filename"), Input("upload-data", "contents")],
    )


def update_output(filenames, fileData):
    if filenames is not None and fileData is not None:
        for name, data in zip(filenames, fileData):
            File.saveFile(name, data, File.UPLOAD_DIRECTORY)

        return "Upload Successful"
    


#example callback function that outputs file text when file is selected;
#currently outputs a datatable of decimal values
#--Where code for machine learning model will go, that will return results of scan--#
@malwareApp.callback(
    Output("dataTable", "children"),
    Input("processBtn", "n_clicks"),
    State("fileList", "value")
    )

def processText(processBtn, filename):
    if "exe" or "dll" in filename:
        

        if filename != None:
            #set the filepath for later use
            path = "malwareGUI/outputFiles/"
            file = filename
            
            infile = open(path + file, "r")

            

            #When result of scan is computed, use it to set 
            #the color of the output text for the card
            percent = make_prediction(path + file)
            
            if percent > '50':
                color = "text-danger"
            
            else:
                color = "text-success"


            #create dataframe and set the header for the dataframe for the datatable
            dataframe = pd.read_csv(path + file, names = ["****----Decimal Values----****"])


            #find the length; If there are over 300,000 rows, 
            #create a slice of the first 300,000 rows of the dataframe;
            length = len(dataframe.index)
            if length > 450000:
                dataframe = dataframe.iloc[:450000]


            #creates the datatable and card by using the dataframe, percent value, and color option
            #to build the DOM elements and return them; The DOM elements returned fill a div already
            #placed on the webpage
            dataTable = [dbc.Card([html.H1("File View", className="text-center"), 
                                dt.DataTable(data = dataframe.to_dict('records'), 
                                columns=[{"name": i, "id": i} for i in dataframe.columns], 
                                style_cell={'textAlign': 'left'}, 
                                page_size=13, 
                                cell_selectable = True, 
                                )]),
                        
                        dbc.Card([(dbc.CardImg(src="assets/bug.svg", className = "mt-5 w-25 mx-auto")), 
                        html.H1(f"{percent}% Match", className = f"mx-auto {color}")], className = "mt-2", 
                        style={"height": "268px"})]

            return dataTable

    else:
        return "File format not supported"


            



#callback function that deletes a file
@malwareApp.callback(
    Output("textContent", "children"),
    Input("deleteBtn", "n_clicks"),
    State("fileList", "value")
    )

def deleteFile(deleteBtn, filename):
    if filename != None:
        path = "malwareGUI/app_uploaded_files/" + filename
        path2 = "malwareGUI/outputFiles/" + filename
        if os.path.isfile(path2) and filename != ".DS_Store":
            os.remove(path2)
        
        os.remove(path)

        return filename + " is deleted"



#callback function that disassembles the file
#and saves it to malwareGUI/outputFiles;
#Kenneth started the first iteration, 
#and Cameron revised it further
@malwareApp.callback(
    Output("textContent2", "children"),
    Input("objdumpBtn", "n_clicks"),
    State("fileList", "value")
)

def disassembleFile(objdumpBtn, filename):
    if filename != None:
        writedir = "malwareGUI/outputFiles/"
        outputMessage = File.dumpOpCodes(filename, writedir + filename)

        return outputMessage
        
        
            





if __name__ == "__main__":
    server.run(debug=False)
