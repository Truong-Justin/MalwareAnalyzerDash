import base64
import os
import pandas as pd
from dash import Dash, dcc, html
from dash.dependencies import Input, Output, State
import dash_bootstrap_components as dbc
from dash import dash_table as dt




class mlModel:
    modelData = None
    predictionAlgo = None


    def makePrediction():
        pass





class File:
    UPLOAD_DIRECTORY = "malwareGUI/app_uploaded_files"
    OUTPUT_Directory = "malwareGUI/outputFiles"

    #Takes a source path and destination path, and writes the commands for objdump
    #to disassemble executable file, then it sends the output to the destination path;
    def disassembleFile(sourcePath, destinationPath):

        # first lets get file path of binary we want to work with
        file_path = sourcePath

        # next lets get output directory
        output_path = '> ' + destinationPath

        # debug mode
        debug = '-d '

        # this is for processing one file right now, need to update for directory
        command_subsection = 'sudo objdump -M intel -b '
        bfd = ''




        # next we need to get bfd for the file as parameter of objdump
        bfd_cmd = 'objdump -f ' + file_path + ' > tmp.txt'
        os.system(bfd_cmd)
        f = open("tmp.txt", "r")

        # just search file for bfd format

        pei = 'pei-x86-64'
        pe = 'pe-x86-64'

        if pei in f.read():
            bfd = pei + ' '

        elif pe in f.read():
            bfd = pe + ' '

        os.remove("tmp.txt")

        command = command_subsection + bfd + debug + file_path + output_path
        os.system(command)



    def save_file(name, content, directory):
        #Saves file within uploaded files folder
        data = content.encode("utf8").split(b";base64,")[1]
        with open(os.path.join(directory, name), "wb") as fp:
            fp.write(base64.decodebytes(data))


    def uploaded_files():                                                       
        #List of filenames saved within uploaded files folder
        files = []
        for filename in os.listdir(File.UPLOAD_DIRECTORY):
            path = os.path.join(File.UPLOAD_DIRECTORY, filename)
            if os.path.isfile(path) and filename != ".DS_Store":
                files.append(filename)

        return files


    def disassembledFiles():
        files = []
        for filename in os.listdir(File.OUTPUT_Directory):
            files.append(filename)

        return files






malwareApp = Dash(__name__, meta_tags=([{'name': 'viewport', 'content':'width=device-width, initial-scale=1.0'}]), external_stylesheets=[dbc.themes.BOOTSTRAP])
app = malwareApp.server



#Layout of page
banner = html.Div([html.Div([html.H1("Malware Analyzer", className="text-warning text-center"), 
        html.P("Developed using Python and Machine Learning", className="text-center mb-5")])], className="bg-dark text-light p-4 text-center")


malwareApp.layout = html.Div([banner, html.Div([dbc.Card(
    [
        dbc.CardImg(src="https://www.cisco.com/c/en/us/products/security/advanced-malware-protection/what-is-malware/jcr:content/Grid/category_atl_9819/layout-category-atl/anchor_info_a0df.img.png/1648845856586.png", top=True),
        html.H1("File Browser", className = "mb-4"),
        html.H2("Upload"),
        dcc.Upload(
            id="upload-data",
            children=html.Div(
                ["Drag and drop or click to select a file to upload."]
            ),
            style={
                "width": "90%",
                "height": "60px",
                "lineHeight": "60px",
                "borderWidth": "1px",
                "borderStyle": "dashed",
                "borderRadius": "5px",
                "textAlign": "center",
                "margin": "10px",
                },
                multiple=True, className = "mb-4"
                   ),

        html.H2("File List"),
        html.Ul(id="file-list", className = "mb-5"),
        html.Ul(id="objdumpList", className = "mb-5"),
        dbc.Input(placeholder = "Enter File Name", id="userInput", className = "w-75"),
        dbc.Button("Process File", id="processBtn", className = "w-25 btn-primary my-2"),
        dbc.Button("Delete File", id="deleteBtn", className = "w-25 btn-warning"),
        dbc.Button("objdump", id="objdumpBtn", className = "w-25 btn-success my-2"),
        html.P(id="textContent"),
        html.P(id="textContent2")
    ],
        
        style={"max-width": "500px"},
    ), 
    
        html.Div(id="dataTable", className="inline-block")], 
                    className="d-flex align-items-center justify-content-center my-5 bg-light")])






#callback function that updates file list when file is uploaded
@malwareApp.callback(
    Output("file-list", "children"),
    Output("objdumpList", "children"),
    [Input("upload-data", "filename"), Input("upload-data", "contents")],
    )


def update_output(uploaded_filenames, uploaded_file_contents):
    if uploaded_filenames is not None and uploaded_file_contents is not None:
        for name, data in zip(uploaded_filenames, uploaded_file_contents):
            File.save_file(name, data, File.UPLOAD_DIRECTORY)

    files = File.uploaded_files()
    objDumpFiles = File.disassembledFiles()

    if len(files) == 0:
        return [html.Li("No files yet!")], [html.Li("No files yet!")]
            
    else:
        return [html.Li(filename) for filename in files], [html.Li(filename) for filename in objDumpFiles]

        

#example callback function that outputs file text when file is selected;
#currently outputs a datatable of hex values, plan to add two cards for scan results;
#--Where code for machine learning model will go, that will return results of scan--#
@malwareApp.callback(
    Output("dataTable", "children"),
    Input("processBtn", "n_clicks"),
    State("userInput", "value")
    )

def processText(processBtn, filename):
    if processBtn and filename is not None:
        path = "malwareGUI/app_uploaded_files/"
        file = filename
        infile = open(path + file, "r")
        firstLine = infile.readline()
        columns = len(firstLine.split(sep=" "))
            

        columnNames = []
        for i in range(columns):
            columnNames.append(f"Hex [{str(i+1)}]")


        dataframe = pd.read_csv(path + file, names=columnNames, sep=" ")
        dataTable = [html.H1(" Hex View"), dt.DataTable(data = dataframe.to_dict('records'), columns=[{"name": i, "id": i} for i in dataframe.columns], page_size=20)]

        return dataTable



#callback function that deletes a file
@malwareApp.callback(
    Output("textContent", "children"),
    Input("deleteBtn", "n_clicks"),
    State("userInput", "value")
    )

def deleteFile(deleteBtn, filename):
    if deleteBtn and filename is not None:
        files = File.uploaded_files()

        path = "malwareGUI/app_uploaded_files/" + filename
        path2 = "malwareGUI/outputFiles/" + filename
        if os.path.isfile(path2) and filename != ".DS_Store":
            os.remove(path2)

           
        os.remove(path)

        return filename + " is deleted"




@malwareApp.callback(
    Output("textContent2", "children"),
    Input("objdumpBtn", "n_clicks"),
    State("userInput", "value")
)

def disassembleFile(objdumpBtn, filename):
    if objdumpBtn and filename is not None:
        sourcePath = "malwareGUI/app_uploaded_files/" + filename
        destinationPath = "malwareGUI/outputFiles/" + filename
            
        File.disassembleFile(sourcePath, destinationPath)
                
        return "file disassembled"


            
            



                


if __name__ == "__main__":
    app.run(debug=True)