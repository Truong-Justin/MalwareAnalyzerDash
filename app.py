import base64
import os, subprocess, re
from os import scandir
import pandas as pd
import numpy as np
from dash import Dash, dcc, html
from dash.dependencies import Input, Output, State
import dash_bootstrap_components as dbc
from dash import dash_table as dt





class MLModel:
    weights = []
    predictionAlgo = None


    def makePrediction(weightList):
        MLModel.weights = weightList
        
    





class File:
    UPLOAD_DIRECTORY = "malwareGUI/app_uploaded_files/"
    OUTPUT_DIRECTORY = "malwareGUI/outputFiles/"
    format = ""
    lines = 0

    
    # Get the opcodes for all files in a directory
    def dumpOpCodes(filename, writePath, file_path = UPLOAD_DIRECTORY): 
        # Loop through each file in listOfFiles
        
        try:
            writedir = writePath
            # Get the file format

            fileFormat = subprocess.run(["objdump", "-f", file_path + filename], capture_output=True)

            try:
                # Filter out only the architecture type
                fileFormat = re.search("file format (.+)", fileFormat.stdout.decode("utf-8")).group(1).strip()
                File.Format = fileFormat 
            except:
                # objdump returns "file format not recognized"
                pass

                
            if fileFormat != "pei-x86-64" or "pe-x86-64":
                pass
                #return "Invalid file format", fileFormat

            # Skip dumping hex if file already exists
            if os.path.exists(writedir):
                pass
                

            # Dissasemble all headers in file without outputting addresses
            opCodes = subprocess.run(["objdump", "-M", "intel", "-b", fileFormat, "-s",  "-d", file_path + filename], capture_output=True).stdout.decode("utf-8")


            # Filter out only hex using regex
            hexOnly = re.findall("\t(\w{2}( \w{2})*).+\t", opCodes)
            opCodes = ''


            # Loop through each intruction
            for op in hexOnly:
                int_opcode = ''


                # Loop through each byte in instruction
                for byte in op[0].split(' '):
                    # Convert byte to int
                    int_opcode += str(int(byte, base=16)) + ' '
                opCodes += int_opcode.strip() + '\n'

            


            # Write opCodes to file   
            with open(writedir, "w") as out:
                out.write(opCodes)
                   
                
            out.close()

            return File.Format
            

        except Exception as e:
            print(e)
                



    def save_file(name, content, directory):
        #Saves file within uploaded files folder
        data = content.encode("utf8").split(b";base64,")[1]
        with open(os.path.join(directory, name), "wb") as fp:
            fp.write(base64.decodebytes(data))



    def getFilesInDirectory(path):
        #return the filename and path to file 
        files = []
        try:
            files = [(f.name, f.path) for f in scandir(path)]
        
        except Exception:
            pass

        return files




MLModel.makePrediction([2,9,5,7])
print(MLModel.weights)


malwareApp = Dash(__name__, meta_tags=([{'name': 'viewport', 'content':'width=device-width, initial-scale=1.0'}]), external_stylesheets=[dbc.themes.BOOTSTRAP])
server = malwareApp.server



#Layout of page
banner = html.Div([html.Div([html.H1("Malware Analyzer", className="text-warning text-center"), 
        html.P("Developed using Python, Machine Learning, and the Dash framework", className="text-center mb-1")])], className="bg-dark text-light p-4 text-center")


malwareApp.layout = html.Div([banner, html.Div([dbc.Card(
    [
        dbc.CardImg(src="assets/laptop.svg", top=True, className = "img-fluid mx-auto w-50"),
        dcc.Upload(id="upload-data", children=html.Div(
                ["Drag and drop or click to select a file to upload."]
            ),
            style={
                "width": "90%",
                "height": "90px",
                "lineHeight": "60px",
                "borderWidth": "1px",
                "borderStyle": "dashed",
                "borderRadius": "5px",
                "textAlign": "center",
                "margin": "10px",
                },
                multiple=True, className = "mb-4 mx-auto"
                   ),

        html.H2("File List"),
        dcc.Dropdown(id="dropdown", options = ["Uploaded Files", "Disassembled Files"], 
                     value = "Uploaded Files", className = "w-50"),
        html.Ul(id="directoriesList"),
        dcc.Dropdown(id="fileList", className = "mt-5"),
        html.Div([
        dbc.Button("Process File", id="processBtn", className = "w-25 btn-dark btn-sm"),
        dbc.Button("Delete File", id="deleteBtn", className = "w-25 mx-2 btn-warning btn-sm"),
        dbc.Button("objdump", id="objdumpBtn", className = "w-25 btn-secondary btn-sm")], className = "text-center mt-5"),

        html.P(id="textContent", className="text-danger"),
        html.P(id="textContent2", className="text-success"),
        html.P(id="statusComplete", className="text-success")
    ],
        
        style={"max-width": "500px"}, className="h-100",
    ), 
        
        html.Div(id="dataTable", className="inline-block", style={"height": "800px"}),
        ], 
                    style={"height": "800px"}, className="d-flex align-items-center justify-content-center my-5 bg-light")])





#callback function that returns a list of filenames within selected directory
@malwareApp.callback(
    Output("directoriesList", "children"),
    Input("dropdown", "value"),
)


#currently returning a tuple that is causing runtime issues when deployed
def listDirectories(dropdownValue):
    ddlOptions = {"Uploaded Files": "malwareGUI/app_uploaded_files/", "Disassembled Files": "malwareGUI/outputFiles/"}
    fileList = [html.Li(file) for file in os.listdir(ddlOptions[dropdownValue])]
    

    return fileList



#callback function that populates the drop-down menu for user file selection
@malwareApp.callback(
    Output("fileList", "options"),
    Input("dropdown", "value")
)

def listFiles(dropdownValue):
    ddlOptions = {"Uploaded Files": "malwareGUI/app_uploaded_files/", "Disassembled Files": "malwareGUI/outputFiles/"} 
    fileNames = os.listdir(ddlOptions[dropdownValue])
    

    return fileNames




#callback function that saves file into app_uploaded_files
@malwareApp.callback(
    Output("statusComplete", "children"),
    [Input("upload-data", "filename"), Input("upload-data", "contents")],
    )


def update_output(filenames, fileData):
    if filenames is not None and fileData is not None:
        for name, data in zip(filenames, fileData):
            File.save_file(name, data, File.UPLOAD_DIRECTORY)

        return "Upload Successful"
    


#example callback function that outputs file text when file is selected;
#currently outputs a datatable of hex values, plan to add two cards for scan results;
#--Where code for machine learning model will go, that will return results of scan--#
@malwareApp.callback(
    Output("dataTable", "children"),
    Input("processBtn", "n_clicks"),
    State("fileList", "value")
    )

def processText(processBtn, filename):
    if filename != None:
        #Creates the Hex Table and the column 
        #headers out of the text file
        path = "malwareGUI/outputFiles/"
        file = filename
        
        percent = 41
        color = "text-success"


        dataframe = pd.read_csv(path + file)
        fileLength = len(dataframe.index)

        dataTable = [dbc.Card([html.H1("File View", className="text-center mb-5"), 
                               html.H2(f"Filename: {file}", className = "my-2"),
                               html.H2(f"fileLength: {fileLength}", className = "my-2")]),
                    
                    dbc.Card([(dbc.CardImg(src="assets/bug.svg", className = "mt-5 w-25 mx-auto")), 
                    html.H1(f"{percent}% Match", className = f"mx-auto {color}")], className = "mt-2", 
                    style={"height": "268px", "width": "500px"})]

        


        return dataTable



#callback function that deletes a file
@malwareApp.callback(
    Output("textContent", "children"),
    Input("deleteBtn", "n_clicks"),
    State("fileList", "value")
    )

def deleteFile(deleteBtn, filename):
    if filename != None:
        path = "malwareGUI/app_uploaded_files/" + filename
        path2 = "malwareGUI/outputFiles/" + filename
        if os.path.isfile(path2) and filename != ".DS_Store":
            os.remove(path2)
        
        os.remove(path)

        return filename + " is deleted"



#callback function that disassembles the file
#and saves it to malwareGUI/outputFiles;
#Cameron's Code
@malwareApp.callback(
    Output("textContent2", "children"),
    Input("objdumpBtn", "n_clicks"),
    State("fileList", "value")
)

def disassembleFile(objdumpBtn, filename):
    if filename != None:
        writedir = "malwareGUI/outputFiles/"
        fileFormat = File.dumpOpCodes(filename, writedir + filename)

        
        return f"Format: {fileFormat}"

        
        
        
            


                


if __name__ == "__main__":
    server.run(debug=False)