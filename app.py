import base64
import os
from datetime import date
from tracemalloc import start
import pandas as pd
import yfinance as yf
from urllib.parse import quote as urlquote
from flask import Flask, send_from_directory
import dash
from dash import dcc
from dash import html
from dash.dependencies import Input, Output, State
import dash_bootstrap_components as dbc
from dash import dash_table as dt




class ManipulateFile:
    UPLOAD_DIRECTORY = "malwareGUI/app_uploaded_files"

    #make function that will output data to datatable using dataframe object


    def save_file(name, content):
        "Decode and store a file uploaded with Plotly Dash."
        data = content.encode("utf8").split(b";base64,")[1]
        with open(os.path.join(ManipulateFile.UPLOAD_DIRECTORY, name), "wb") as fp:
            fp.write(base64.decodebytes(data))


    def uploaded_files():
        "List the files in the upload directory."
        files = []
        for filename in os.listdir(ManipulateFile.UPLOAD_DIRECTORY):
            path = os.path.join(ManipulateFile.UPLOAD_DIRECTORY, filename)
            if os.path.isfile(path) and filename != ".DS_Store":
                files.append(filename)
        return files


    def file_download_link(filename):
        "Create a Plotly Dash 'A' element that downloads a file from the app."
        location = "/download/{}".format(urlquote(filename))
        return html.A(filename, href=location)




today = date.today()
df = yf.download("AAPL", start='2021-12-01', end=today)



if not os.path.exists(ManipulateFile.UPLOAD_DIRECTORY):
    os.makedirs(ManipulateFile.UPLOAD_DIRECTORY)


server = Flask(__name__)
app = dash.Dash(server=server, external_stylesheets=[dbc.themes.BOOTSTRAP])


banner = html.Div([html.Div([html.H1("Malware Analyzer", className="text-warning text-center"), html.P("Developed using Python and Machine Learning", className="text-center")])], className="bg-dark text-light p-4 text-center")

dropDown = html.Div(dbc.DropdownMenu(
    id="dropDown",
    label="Menu"
))

deleteButton = dbc.Button("Delete", id="btnDelete")

app.layout = html.Div([banner, html.Div([dbc.Card(
    [
        dbc.CardImg(src="https://www.cisco.com/c/en/us/products/security/advanced-malware-protection/what-is-malware/jcr:content/Grid/category_atl_9819/layout-category-atl/anchor_info_a0df.img.png/1648845856586.png", top=True),
        html.H1("File Browser"),
        html.H2("Upload"),
        dcc.Upload(
            id="upload-data",
            children=html.Div(
                ["Drag and drop or click to select a file to upload."]
            ),
            style={
                "width": "90%",
                "height": "60px",
                "lineHeight": "60px",
                "borderWidth": "1px",
                "borderStyle": "dashed",
                "borderRadius": "5px",
                "textAlign": "center",
                "margin": "10px",
            },
            multiple=True,
        ),
        html.H2("File List"),
        html.Ul(id="file-list"),
    ],
    style={"max-width": "500px"},
), dt.DataTable(data=df.to_dict('records'), columns=[{"name": i, "id": i} for i in df.columns], page_size=15)], className="d-flex align-items-center justify-content-center my-5 bg-light")])



@server.route("/download/<path:path>")
def download(path):
    "User can download file from UPLOAD_DIRECTORY"
    return send_from_directory(ManipulateFile.UPLOAD_DIRECTORY, path, as_attachment=True)



@app.callback(
    Output("file-list", "children"),
    [Input("upload-data", "filename"), Input("upload-data", "contents")],
)


def update_output(uploaded_filenames, uploaded_file_contents):
    "Save uploaded files and generate the file list."

    if uploaded_filenames is not None and uploaded_file_contents is not None:
        for name, data in zip(uploaded_filenames, uploaded_file_contents):
            ManipulateFile.save_file(name, data)

    files = ManipulateFile.uploaded_files()
    if len(files) == 0:
        return [html.Li("No files yet!")]
    else:
        return [html.Li(ManipulateFile.file_download_link(filename)) for filename in files]

    
# @app.callback(
#     Output("dropDown", "children"),
#     Input("dropDown", "n_clicks")
# )

# def update_file_list(userSelection):
#     files = ManipulateFile.uploaded_files()
#     files.remove(userSelection)

#     return [dbc.DropdownMenuItem(filename) for filename in files]



if __name__ == "__main__":
    app.run_server(debug=True, port=8888)