import base64
import os
import pandas as pd
from flask import Flask
from dash import Dash, dcc, html
from dash.dependencies import Input, Output, State
import dash_bootstrap_components as dbc
from dash import dash_table as dt




class ManipulateFile:
    UPLOAD_DIRECTORY = "malwareGUI/app_uploaded_files"

    def disassembleFile(sourcePath, destinationPath):
        ''' 
        file_path = '~/binaries/benign/'
        output_path = '~/binaries/dumps/'
        '''

        file_path = sourcePath
        output_path = destinationPath
        binaries_list = os.listdir(file_path)

        # file path to each binary in directory
        binaries_file_path = []

        # file path to output for each binary
        output_list = []

        # list of bfd for executables
        bfd_list = []

        for i in range(len(binaries_list)):
            binaries_file_path.append(file_path + binaries_list[i])
            output_list.append('> ' + output_path + binaries_list[i].replace('.exe', '') + '.txt')

        debug = '-d '

        command_subsection = 'sudo objdump -M intel -b '

        for i in range(len(binaries_list)):
            bfd = ''
            bfd_cmd = 'objdump -f ' + binaries_file_path[i] + ' > tmp.txt'
            os.system(bfd_cmd)
            f = open("tmp.txt", "r")

            # just search file for bfd format

            pei = 'pei-x86-64'
            pe = 'pe-x86-64'

            if pei in f.read():
                bfd = pei + ' '

            elif pe in f.read():
                bfd = pe + ' '

            bfd_list.append(bfd)

            os.remove("tmp.txt")

        for i in range(len(binaries_list)):
            command = command_subsection + bfd_list[i] + debug + binaries_file_path[i] + output_list[i]
            os.system(command)


    def save_file(name, content):
        #Save file 
        data = content.encode("utf8").split(b";base64,")[1]
        with open(os.path.join(ManipulateFile.UPLOAD_DIRECTORY, name), "wb") as fp:
            fp.write(base64.decodebytes(data))


    def uploaded_files():
        #List uploaded files
        files = []
        for filename in os.listdir(ManipulateFile.UPLOAD_DIRECTORY):
            path = os.path.join(ManipulateFile.UPLOAD_DIRECTORY, filename)
            if os.path.isfile(path) and filename != ".DS_Store":
                files.append(filename)

        return files






server = Flask(__name__)
malwareApp = Dash(server=server, external_stylesheets=[dbc.themes.BOOTSTRAP])
app = malwareApp.server



#Layout of page
banner = html.Div([html.Div([html.H1("Malware Analyzer", className="text-warning text-center"), 
         html.P("Developed using Python and Machine Learning", className="text-center mb-5")])], className="bg-dark text-light p-4 text-center")


malwareApp.layout = html.Div([banner, html.Div([dbc.Card(
    [
        dbc.CardImg(src="https://www.cisco.com/c/en/us/products/security/advanced-malware-protection/what-is-malware/jcr:content/Grid/category_atl_9819/layout-category-atl/anchor_info_a0df.img.png/1648845856586.png", top=True),
        html.H1("File Browser", className = "mb-4"),
        html.H2("Upload"),
        dcc.Upload(
            id="upload-data",
            children=html.Div(
                ["Drag and drop or click to select a file to upload."]
            ),
            style={
                "width": "90%",
                "height": "60px",
                "lineHeight": "60px",
                "borderWidth": "1px",
                "borderStyle": "dashed",
                "borderRadius": "5px",
                "textAlign": "center",
                "margin": "10px",
            },
            multiple=True, className = "mb-4"
        ),
        html.H2("File List"),
        html.Ul(id="file-list", className = "mb-5"),
        dbc.Input(placeholder = "Enter File Name", id="userInput", className = "w-75"),
        dbc.Button("Process File", id="processBtn", className = "w-25 btn-primary my-2"),
        dbc.Button("Delete File", id="deleteBtn", className = "w-25 btn-warning"),
        html.P(id="textContent"),
        html.P(id="textContent2")
    ],
    style={"max-width": "500px"},
), html.Div(id="dataTable", className="inline-block")], 
                className="d-flex align-items-center justify-content-center my-5 bg-light")])






#callback function that updates file list when file is uploaded
@malwareApp.callback(
    Output("file-list", "children"),
    [Input("upload-data", "filename"), Input("upload-data", "contents")],
)


def update_output(uploaded_filenames, uploaded_file_contents):
    if uploaded_filenames is not None and uploaded_file_contents is not None:
        for name, data in zip(uploaded_filenames, uploaded_file_contents):
            ManipulateFile.save_file(name, data)

    files = ManipulateFile.uploaded_files()
    if len(files) == 0:
        return [html.Li("No files yet!")]
        
    else:
        return [html.Li(filename) for filename in files]

    

#example callback function that outputs file text when file is selected;
#currently outputs a datatable of hex values, plan to add two cards for scan results;
#--Where code for machine learning model will go, that will return results of scan--#
@malwareApp.callback(
    Output("dataTable", "children"),
    Input("processBtn", "n_clicks"),
    State("userInput", "value")
)

def processText(processBtn, filename):
    if processBtn:
        path = "malwareGUI/app_uploaded_files/"
        file = filename
        infile = open(path + file, "r")
        firstLine = infile.readline()
        columns = len(firstLine.split(sep=" "))
        

        columnNames = []
        for i in range(columns):
            columnNames.append(f"Hex [{str(i+1)}]")


        dataframe = pd.read_csv(path + file, names=columnNames, sep=" ")
        dataTable = [html.H1(" Hex View"), dt.DataTable(data = dataframe.to_dict('records'), columns=[{"name": i, "id": i} for i in dataframe.columns], page_size=20)]

        return dataTable


#callback function that deletes a file
@malwareApp.callback(
    Output("textContent", "children"),
    Input("deleteBtn", "n_clicks"),
    State("userInput", "value")
)

def disassembleFile(deleteBtn, filename):
    if deleteBtn:
        files = ManipulateFile.uploaded_files()

        path = "malwareGUI/app_uploaded_files/"
        os.remove(path + filename)

        return filename + " is deleted"

        



            


if __name__ == "__main__":
    app.run(debug=True)